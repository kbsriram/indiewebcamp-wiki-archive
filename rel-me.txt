http://indiewebcamp.com/rel-me

{{stub}}

'''<code>rel=me</code>''' is how to indicate that the destination of a hyperlink represents the same person as the current page. Its primary use is to enable [[web-sign-in]], e.g. as supported by [[IndieAuth]] for signing into IndieWebCamp.com.

See the [http://microformats.org/wiki/rel-me rel-me specification] for more details.

== Implementations ==
* '''PHP''' [https://github.com/indieweb/rel-me indieweb/rel-me] package has functions for getting rel=me URLs on a site, securely deriving profile URLs and securely matching silo backlinking URLs against profile URLs
* '''Ruby''' [https://github.com/aaronpk/IndieAuth/blob/master/lib/relparser.rb relparser.rb] (part of IndieAuth) contains functions for doing the same sort of stuff
* '''Python''' [https://github.com/bear/ronkyuu/blob/master/ronkyuu/relme.py relme.py] (part of Ronkyuu) contains functions to discover rel=me URLs on a site, generate normative URLs for both profile and resource URLs and to confirm that a resource URL is authoritative for a given profile URL.

== Connecting the dots between rel=me and relmeauth ==

This is my current interpretation - so people can correct and critique
it rather than assert any truthiness to this.

rel=me is intended to mean that the destination represents "the same
person as" the current page.

However, it also serves a dual purpose when used for [[RelMeAuth]]
based authorization. Here, a rel=me link really wants to mean the
destination "can claim control over" the current page. You could
instead pretend there's a "rel=is-controlled-by" tag to distinguish
the two contexts.

'''Why does this distinction matter?'''

A page such as github.com/kbsriram cannot (legitimately) claim a
rel=me link to github.com. Clearly, the site "github.com" does not
represent a "person who is the same as" github.com/kbsriram

However, the root domain on every website does control all its sub
pages, so in fact, github.com/kbsriram has an implicit
"rel=is-controlled-by" to github.com, but it does not have a rel=me
link to github.com

This distinction matters when finding rel=me closures in the two
contexts of identity consolidation and relmeauth based authorization.

To make this concrete, let's assume we have these three pages, with
these rel=me links on them.

    myfamily.com/tommy [rel=me] -&gt; {plus.google.com/+tommy}
    myfamily.com [rel=me] -&gt; {plus.google.com/+tommy}
    plus.google.com/+tommy [rel=me] -&gt; {myfamily.com/tommy}

=== Context 1: Consolidating Identities ===

Given a page, find me all the pages who are "the same person as" the
current page.

The approach is to recursively follow all the rel=me links from the
starting page, and return only that subset which is within any loop of
rel=me links that include the starting page.

This is so that only a group of mutually verifying pages are
returned, or anyone could simply claim they were
https://plus.google.com/+LinusTorvalds by putting a rel=me link on their page.

If we started from myfamily.com/tommy, we'd get back
    {myfamily.com/tommy, plus.google.com/+tommy}
as the pages who "are the same person as" myfamily.com/tommy

And If we started from myfamily.com, we'd get back just
    {myfamily.com}


=== Context 2: relmeauth based login ===

Given an page, find me all the pages "who can control" the current
page. The "current page" is used as the username, and one of the
controlling pages is used to login the user, say through OAuth.

In principle (though implementations don't necessarily do this) the
approach is still similar, but now there is an implicit assumption
that any subpage of a domain is controlled by the bare domain.

In particular, the set of all pages "who can control" myfamily.com is

    {myfamily.com, plus.google.com/+tommy, myfamily.com/tommy}

because of the implied link that myfamily.com/tommy is-controlled-by
myfamily.com


== See Also ==
* [[microformats]]
* [[web-sign-in]]
* [[IndieAuth]]
