http://indiewebcamp.com/POSSE

'''<dfn>POSSE</dfn>''' is an acronym/abbreviation for '''Publish (on your) Own Site, Syndicate Elsewhere'''. It's a [[syndication-models|Syndication Model]] where the flow involves posting your content on your own domain first, then syndicating out copies to 3rd party services with perma(short)links back to the original version.

POSSE lets your friends keep using whatever silo aggregator ([[Facebook]], [[Twitter]], etc.) they've been using to read your stuff.

It's a key part of why and how the "IndieWeb" movement is different from just "everyone blog on their own site", and also different from "everyone just install and run StatusNet/Diaspora" etc.

POSSE is actually <em>more</em> important than [[federation]]. POSSE is about staying in touch with <em>current</em> friends <em>now</em>, rather than the <em>potential</em> of staying in touch with friends in the <em>future</em>. In addition, if federated approaches take a POSSE approach first, they will likely get better adoption (everyone wants to stay in touch with their friends), and thereby more rapidly approach that federated future.

== IndieWeb examples ==
The following IndieWebCamp participants' sites support a POSSE architecture. If you have an implementation, add it, make screenshots or a screencast or blog about it and post the details/link here. In date order (earliest first) :

* '''[http://tantek.com Tantek.com]''' as of 2010-01-01[http://tantek.com/2010/001/t1/declaring-independence-building-it] (2010-01-26 Twitter syndication started[http://twitter.com/t/status/8228455558] and caught up[http://tantek.com/2010/026/t2/tweeting-from-tantek-com][http://twitter.com/t/status/8228820728]). [[User:tantek.com|Tantek Çelik]] implemented POSSE in [http://tantek.com/w/Falcon Falcon] on [http://tantek.com tantek.com].
** all self-hosted posts (notes, articles, etc.) are openly [[PuSH]]+Atom real-time syndicated with a PubsubHubbub hub to Google Buzz, StatusNet, etc.
** notes (and article titles) are [[snowflake]] copied by the personal site server to Twitter with permashortlink citation links/references (see [http://tantek.com/w/Whistle Whistle] for details) back to the original. Copies of notes to Twitter are also automatically recopied from there to Facebook.

* '''[http://Waterpigs.co.uk Waterpigs.co.uk]''' as of 2012-03-12. [[User:waterpigs.co.uk|Barnaby Walters]] implemented POSSE over at [http://waterpigs.co.uk waterpigs.co.uk]
** as of 2012-09-25 all collections (notes, articles, activity) are [[PuSH]]-subscribable [[feeds]].
** Using the Client to Server to 3rd Parties flow --[[User:Waterpigs.co.uk|Waterpigs.co.uk]] 06:08, 25 September 2012 (PDT)
** Syndicating to Twitter + Facebook

* '''[http://aaronparecki.com aaronparecki.com]''' as of 2012-08-19[http://aaronparecki.com/2012/232/note/1][https://twitter.com/aaronpk/status/237344101928951808]. [[User:Aaronparecki.com|Aaron Parecki]] implemented POSSE on his site [http://aaronparecki.com aaronparecki.com] with copies posted to Twitter containing permashortlinks back to originals on his own site.
** as of 2012-08-19 all collections (notes, articles, replies) are [[PuSH]]-subscribable [[feeds]].
** Posting UI as of 2012-09-09: http://aaronparecki.com/2012/253/note/3

* '''[https://brennannovak.com brennannovak.com]''' as of 2012-07-01[https://brennannovak.com/notes/10][https://twitter.com/brennannovak/status/212243963011280897]. [[User:Brennannovak.com|Brennan Novak]] implemented POSSE on his site [https://brennannovak.com brennannovak.com] with copies posted to Twitter and Facebook

* '''[[User:Sandeep.io]]''' First post POSSE'd on 05-Nov-2012. I primarily syndicate to Twitter using a very lo-fi solution of adding silo (Facebook, Twiiter, Google+) provided share links to each post that I can manually click to prefill content, edit and post. I've avoided API integration because of the extensive experience I've had using Facebook API and dealing with it's random changes. "Integration" has high costs sometimes so I keep it as simple as possible.

* '''[http://werd.io werd.io]''' as of 2013-05-31 [http://werd.io/view/51a7fb55bed7de2f06761712]. [[User:Benwerd.com|Ben Werdmuller]] implemented POSSE in his [http://idno.co idno] platform via plugins. New content has an associated Activity Streams object type; POSSE plugins listen for post events associated with those object types and syndicate appropriately.
** Notes and articles are syndicated to Twitter and Facebook
** Images are syndicated to Facebook, Flickr and Twitter
** Places are syndicated to Foursquare
** More plugins are very easily possible; the Foursquare plugin took about an hour to build

* iamshane.com - need to copy example from [[rel-syndication]] page

* '''[http://glennjones.net glennjones.net]''' as of 2014-01-14 [[User:glennjones.net|Glenn Jones]] The blog implemented POSSE using a new version of [http://transmat.io transmat.io] system. New content added to transmat is associated with objects types. A POSSE twitter plugins listens for post events syndicating content. At moment only notes are syndicated. 

* ... Add a link to your POSSE–enabled site and the date you started syndicating copies of your content out to 3rd party social sharing/publishing services.

Other partial POSSE sites:

* '''[[User:Hupili.net]]''' implements a partial POSSE with the following setups:
** [[SNSAPI]] is a lightweight middleware to unify the data structure and interfaces of different social networking services. It gives the scripting flexibility for developer users to manipulate social silos. 
** [[SNSRouter]] is a web UI built upon SNSAPI where one can read an aggregated timeline from different sites, mass forward messages, and update statuses on all channels. 
** Part of my daily usage is to go to my running SNSRouter, read messages and update statuses on it. The new status is written to the RSS feeds, http://hupili.net/feeds/all.xml , and other silos. ( This feed is indeed a mix of [[POSSE]] [[PESOS]] )
** As is said in one of the description paragraph above, this model is not truly POSSE. One can not (hardly) distinguish original/ syndicated status. I'm planning to put a page with permlink on my site upon each status update and then use SNSAPI to syndicate to other silos.

== Other Approaches ==
A similar but opposite approach is [[PESOS]] where content is posted first to 3rd party services and then copied/syndicated into a personal site. 

If exact copies of content are posted on both a personal site and 3rd party services, there's no way to tell (short of comparing possibly non-existent sub-second accurate published dates) whether a site is using POSSE or PESOS. Sites can provably support POSSE by including perma(short)links in syndicated copies that link/reference back to published originals.

== Advantages ==
POSSE is considered a robust and preferable syndication model for the following reasons:

* '''Ownership.''' By posting ''first'' on your own site, you create a direct ownership chain that can be traced back to you without any intervening 3rd party services (silos) TOS's getting in the way (which is a vulnerability of [[PESOS]]).
* '''Reduce 3rd party dependence.''' By posting directly to your own site, you're not dependent on 3rd Party services to do so -- if you can access your site, you can publish your content
* '''Own canonical URLs to your content.''' Canonical URLs to your content are on your domain.
* '''Copies can cite the original.''' By posting content first to your own site (and thus creating a permalink for it), copies that you post on 3rd Party services can link or cite the original on your site (see [[syndication_formats]] and [[Twitter#POSSE_Notes_to_Twitter|POSSE Notes to Twitter]])
* '''Discovery of your original content.''' [[discovery]] of your original content from the copies on 3rd party services is enabled by the permashortlinks to your originals posted on said services
* '''Better search.''' Searching public content on your own domain (with any web search engine of your choice) works better than depending on Twitter exclusively to search your tweets.[http://tantek.com/2011/009/t3/value-searching-finding-past-tweets-self-hosting]. And when the copies link to your original posts, search engines figure that out by following those links back to the original and ranking it higher.
* [[backfeed]] can be used to pull in (reverse syndicate) responses from other services
* allows taking advantage of other services' social layers and aggregation features while storing the canonical copy of your content on your own site
* ...

== How To Implement ==
There is no one POSSE implementation technique, you have to implement it per [[silo]] destination.

In general, when your content posting software posts something, it should also post a copy to the silo destinations of your choice, with a permashortlink (or permashortcitation) back to your original.

The details of how to do so vary per destination. See the sections below.

== POSSE Destinations ==
=== Twitter ===
{{main|Twitter#POSSE_to_Twitter}}
[[Twitter]] is perhaps the most popular POSSE destination and a good place to start.

If you can start posting notes (tweets) to your own site and POSSEing to Twitter, <em>instead of</em> posting directly to Twitter, you have taken a big step towards owning your data.

Details:
* API Access - [https://dev.twitter.com/docs/api/1.1/post/statuses/update posting new tweets] works nicely due to permanent API tokens, and the return value contains a URL to the posted
* Supports very complete web action endpoints, so semi-manual posting is easy to implement

See [[Twitter#POSSE_to_Twitter|POSSE to Twitter]] for details on how to POSSE both notes and articles (blog posts) to Twitter.

=== Facebook ===
{{main|POSSE to Facebook}}

* API Access - New posts can be created through the API using the [https://developers.facebook.com/docs/reference/api/publishing/ Publishing API]
* A web action endpoint (<code>https://www.facebook.com/dialog/feed</code>) is supplied by the Feed social plugin for semi-manual posting. Requires a facebook app id, but no authentication. It accepts a callback URL, to which it redirects with ?post_id GET param set, from which a URL can be constructed.

=== Google Plus ===
{{main|Google+#POSSE}}
* No write API (yet)
* There are several endpoints which can be used as web action dialogs, but none of them support callbacks, so it’s trick to get the URL of the posted copy.
** Mobile App endpoint: <code>https://m.google.com/app/plus/x/?content=INSERT_MESSAGE_HERE_WITH_URL_IF_YOU_WANT&v=compose&hideloc=1</code>
** Share button endpoint: <code>https://plus.google.com/share?url=</code> (doesn’t support text injection as far as I can tell --[[User:Waterpigs.co.uk|Waterpigs.co.uk]] 14:41, 7 December 2012 (PST))

=== Medium ===
{{main|Medium}}
* how does iamshane.com do it? (all his articles are POSSEd to Medium)

=== WordPress ===
{{main|WordPress}}
* how does iamshane.com do it? (all his articles are POSSEd to WordPress)

=== Articles ===
TODO: Link to/write dev articles/blog posts which guide people in syndicating their content out to these networks

== Software Libraries ==

* PHP
** The POSSE namespace in [https://github.com/barnabywalters/php-helpers php-helpers] (might be moved to a separate package) contains various truncation, preparation and syndication functions including HTML => plaintext µblog syntax converter
* …

== Publishing Flows ==
There's at least two ways to implement a POSSE content posting flow:

=== Client to Own Domain to 3rd Party Services ===
* The user writes a piece of content using a publishing client
** Optional: client provides UI for selecting which 3rd party services to push to if it knows about them, with optional customizations for per service
* Having finished the content, the user publishes content to their server (optionally: with metadata of which 3rd party services and any customizations thereof)
** Optional: client can generate a permalink knowing the state of the server, and publish to that permalink
* The server publishes the content, generates a permalink and summary (and/or customized content suited to 3rd party services) if necessary
* The server posts copies with permalinks to 3rd party services

Advantages:
* User only has to interact with one site over the internet, their own
* Syndication can be done fully automatically by the server
Disadvantages:
* any?

=== Client to Own Domain and 3rd Party Services ===
* The user writes a piece of content using a publishing client
* Having finished the content, the user publishes it to their server
* The client queries the server for the URL of the content it just pushed
* The publishing client presents the user with an interface for selecting:
** Which 3rd party services to publish to
** The exact content published to the services, pre-filled with a summary based on the produced content
* The user selects the services and submits the form
* The publishing client posts the content summaries out to the 3rd party services

Advantages:
* More user control over timing and editing of copies of content to 3rd party services
Disadvantages:
* Syndication requires a manual step each time
* Dependent on client connectivity directly to 3rd party services (problematic in flakey mobile situations, or when client is publishing using domain-censored internet access).

== CRUD ==
All of the above, and to date (2013-222), POSSE has solely described syndicating the <b>C</b>reation of content on your site (publishing) to other sites. This model has been quite successful and perhaps may be sufficient.

However, it is worth exploring the potential utility of a full CRUD protocol for POSSE.

=== Create ===
Create is the POSSE default. You create content on your site, you POSSE your creates to other sites. All of this is described above, and in silo-specific details on [[silo]] pages.

=== Read ===
Read as a verb is interesting when applied to POSSE.

At a minimum, it's useful to implement storing links to syndicated copies of your content to provide for the future possibility of reading from downstream POSSE copies.

See: 
* [[rel-syndication]] for how to markup links to syndicated copies of your content
* [[syndication-link-use-cases]] for why to do so

Actual direct uses of Reading from downstream POSSE copies:
* reverse-syndication / [[backfeed]] of activity around the POSSE copy onto your original:
** [[comments]]/replies
** [[favorites]]/likes
** [[reposts]] (retweets)

In addition, keeping a [[rel-syndication]] link to the POSSE copy enables deleting it to perform an Update or a Delete action, as described in the following sections.

=== Update ===
If a downstream service allows updates/edits, then when you edit your post, you could propagate that update to the downstream POSSE copy as well. (Any existing POSSE destinations that allow this?)

It would be possible to POSSE updates to [[Twitter]] (or any other silo that disallows edits to posts) by deleting the POSSE tweet and reposting.

Consider only POSSEing updates to Twitter:
* if no one has replied to it yet (otherwise you'd break a threaded conversation on Twitter)
* if your changes would be shown in the truncated copy on Twitter (i.e. if your changes are past the 140 (more like 120) character horizon, no point in churning the Twitter copy).
* within a very short time window, maybe like 2-5 minutes, because otherwise the update will be seen as a duplicate to people who are reading you on Twitter.
All of these concerns are regarding the experience that you provide to your friends reading your tweets on Twitter, which of course should be the whole (design) reason you're bothering to POSSE to Twitter in the first place.

=== Delete ===
Deletes seem fairly straightforward to POSSE, especially to services which themselves propagate deletes to clients.

E.g. one can delete a note on Twitter at any point.

Similar to updates, consider:
* if there are already replies to a POSSE copy (or activity like favorites/retweets), consider keeping it to keep conversation threading (and others' favorites/retweets). 

However, if you really feel like deleting the content from your site and POSSE copies (e.g. on Twitter), go ahead and do so. 

Perhaps this is an opportunity for the UI for the deletion of a post to check to see if there's been any activity (replies, favorites, retweets) on the POSSE copy before performing the delete. One possible implementation could involve the UI informing the user of this activity (or lack of it) and reconfirming the delete request on a per-service basis.

== FAQ ==
=== Worry about search engines and duplicates ===
Q: Do we need to worry about search engines penalizing apparently duplicate posts?

A: That's why the POSSE copies SHOULD always link back to the originals. So that search engines can infer that the copies are just copies. Ideally POSSE copies on silos should use [[rel-canonical]] to link back to the originals, but even without explicit rel-canonical, the explicit link back to the original is a strong hint that it is an original.

This is also an advantage of POSSE over PESOS. With PESOS - there's no way to tell what's the original and what's the copy - so they do look like duplicates.

== Background ==
* 2010-05-26 POSSE first described online as a concept in <cite>[http://www.monkinetic.com/2010/05/26/tantek-celik-diso-20-brass-tacks Tantek Celik on DiSo 2.0: Down to Brass Tacks]</cite> : <blockquote>Publish on your own site, own your URLs, your permalinks, and <br/>Syndicate out to other sites. Your text updates to Twitter, your checkins to Foursquare, your photos to Flickr etc.</blockquote>
* 2010-10-06 POSSE architecture (predating the term) [http://www.flickr.com/photos/tantek/5301870765/ http://farm6.static.flickr.com/5250/5301870765_80a1e06212.jpg] <br/> See 2011-01-10 post relating/expanding on it: [http://tantek.com/2011/010/b1/owning-your-data On Owning Your Data: Follow-up to @Zeldman and the #indieweb]
* 2012-06-21 <i>POSSE</i> term defined: http://tantek.com/2012/173/t1/posse-core-indieweb-approach

== Articles ==
Articles and blog posts about POSSE, especially implementing it:
* <span class="h-cite"><time class="dt-published">2013-12-04</time> <span class="p-author h-card">Chloe Weil</span>: <cite class="p-name">[http://chloeweil.com/blog/hipster Hipster]</cite></span>
* <span class="h-cite"><time class="dt-published">2014-03-09</time> <span class="p-author">Sebastian Greger</span> <cite class="p-name">[http://sebastiangreger.net/2014/03/audience-context-conscious-posse-syndication-plugin-wordpress/ An audience/context-conscious POSSE syndication plugin for WordPress]</cite></span>
* ...

== See Also ==
* Relevant session from [[2011]]: [[Publish Then Syndicate and Replicate]]
* Documentation on [[syndication formats]]

== Related ==
* [[PESOS]]
* [[PESETAS]]
* [[why]]

[[Category:building-blocks]]
